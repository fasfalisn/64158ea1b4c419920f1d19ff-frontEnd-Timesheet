/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import December from '../model/December';

/**
* December service.
* @module api/DecemberApi
* @version 1.0.0
*/
export default class DecemberApi {

    /**
    * Constructs a new DecemberApi. 
    * @alias module:api/DecemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createdecember operation.
     * @callback module:api/DecemberApi~createdecemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/December} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/December} december data to be created
     * @param {module:api/DecemberApi~createdecemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/December}
     */
    createdecember(december, callback) {
      let postBody = december;
      // verify the required parameter 'december' is set
      if (december === undefined || december === null) {
        throw new Error("Missing the required parameter 'december' when calling createdecember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = December;
      return this.apiClient.callApi(
        '/december', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedecember operation.
     * @callback module:api/DecemberApi~deletedecemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} decemberId the Id parameter
     * @param {module:api/DecemberApi~deletedecemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedecember(decemberId, callback) {
      let postBody = null;
      // verify the required parameter 'decemberId' is set
      if (decemberId === undefined || decemberId === null) {
        throw new Error("Missing the required parameter 'decemberId' when calling deletedecember");
      }

      let pathParams = {
        'decemberId': decemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/december/{decemberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlldecember operation.
     * @callback module:api/DecemberApi~getAlldecemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/December>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/DecemberApi~getAlldecemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/December>}
     */
    getAlldecember(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [December];
      return this.apiClient.callApi(
        '/december/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsdecember operation.
     * @callback module:api/DecemberApi~getByParamsdecemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/December>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/DecemberApi~getByParamsdecemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/December>}
     */
    getByParamsdecember(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsdecember");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [December];
      return this.apiClient.callApi(
        '/december/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdecember operation.
     * @callback module:api/DecemberApi~getdecemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/December} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} decemberId the Id parameter
     * @param {module:api/DecemberApi~getdecemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/December}
     */
    getdecember(decemberId, callback) {
      let postBody = null;
      // verify the required parameter 'decemberId' is set
      if (decemberId === undefined || decemberId === null) {
        throw new Error("Missing the required parameter 'decemberId' when calling getdecember");
      }

      let pathParams = {
        'decemberId': decemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = December;
      return this.apiClient.callApi(
        '/december/{decemberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatedecember operation.
     * @callback module:api/DecemberApi~updatedecemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/December} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} decemberId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/December} opts.december data to be updated
     * @param {module:api/DecemberApi~updatedecemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/December}
     */
    updatedecember(decemberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['december'];
      // verify the required parameter 'decemberId' is set
      if (decemberId === undefined || decemberId === null) {
        throw new Error("Missing the required parameter 'decemberId' when calling updatedecember");
      }

      let pathParams = {
        'decemberId': decemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = December;
      return this.apiClient.callApi(
        '/december/{decemberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
