/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import August from '../model/August';

/**
* August service.
* @module api/AugustApi
* @version 1.0.0
*/
export default class AugustApi {

    /**
    * Constructs a new AugustApi. 
    * @alias module:api/AugustApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createaugust operation.
     * @callback module:api/AugustApi~createaugustCallback
     * @param {String} error Error message, if any.
     * @param {module:model/August} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/August} august data to be created
     * @param {module:api/AugustApi~createaugustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/August}
     */
    createaugust(august, callback) {
      let postBody = august;
      // verify the required parameter 'august' is set
      if (august === undefined || august === null) {
        throw new Error("Missing the required parameter 'august' when calling createaugust");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = August;
      return this.apiClient.callApi(
        '/august', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteaugust operation.
     * @callback module:api/AugustApi~deleteaugustCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} augustId the Id parameter
     * @param {module:api/AugustApi~deleteaugustCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteaugust(augustId, callback) {
      let postBody = null;
      // verify the required parameter 'augustId' is set
      if (augustId === undefined || augustId === null) {
        throw new Error("Missing the required parameter 'augustId' when calling deleteaugust");
      }

      let pathParams = {
        'augustId': augustId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/august/{augustId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllaugust operation.
     * @callback module:api/AugustApi~getAllaugustCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/August>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/AugustApi~getAllaugustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/August>}
     */
    getAllaugust(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [August];
      return this.apiClient.callApi(
        '/august/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsaugust operation.
     * @callback module:api/AugustApi~getByParamsaugustCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/August>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/AugustApi~getByParamsaugustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/August>}
     */
    getByParamsaugust(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsaugust");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [August];
      return this.apiClient.callApi(
        '/august/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getaugust operation.
     * @callback module:api/AugustApi~getaugustCallback
     * @param {String} error Error message, if any.
     * @param {module:model/August} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} augustId the Id parameter
     * @param {module:api/AugustApi~getaugustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/August}
     */
    getaugust(augustId, callback) {
      let postBody = null;
      // verify the required parameter 'augustId' is set
      if (augustId === undefined || augustId === null) {
        throw new Error("Missing the required parameter 'augustId' when calling getaugust");
      }

      let pathParams = {
        'augustId': augustId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = August;
      return this.apiClient.callApi(
        '/august/{augustId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateaugust operation.
     * @callback module:api/AugustApi~updateaugustCallback
     * @param {String} error Error message, if any.
     * @param {module:model/August} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} augustId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/August} opts.august data to be updated
     * @param {module:api/AugustApi~updateaugustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/August}
     */
    updateaugust(augustId, opts, callback) {
      opts = opts || {};
      let postBody = opts['august'];
      // verify the required parameter 'augustId' is set
      if (augustId === undefined || augustId === null) {
        throw new Error("Missing the required parameter 'augustId' when calling updateaugust");
      }

      let pathParams = {
        'augustId': augustId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = August;
      return this.apiClient.callApi(
        '/august/{augustId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
