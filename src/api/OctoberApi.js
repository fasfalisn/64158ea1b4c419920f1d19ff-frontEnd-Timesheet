/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import October from '../model/October';

/**
* October service.
* @module api/OctoberApi
* @version 1.0.0
*/
export default class OctoberApi {

    /**
    * Constructs a new OctoberApi. 
    * @alias module:api/OctoberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createoctober operation.
     * @callback module:api/OctoberApi~createoctoberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/October} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/October} october data to be created
     * @param {module:api/OctoberApi~createoctoberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/October}
     */
    createoctober(october, callback) {
      let postBody = october;
      // verify the required parameter 'october' is set
      if (october === undefined || october === null) {
        throw new Error("Missing the required parameter 'october' when calling createoctober");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = October;
      return this.apiClient.callApi(
        '/october', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteoctober operation.
     * @callback module:api/OctoberApi~deleteoctoberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} octoberId the Id parameter
     * @param {module:api/OctoberApi~deleteoctoberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteoctober(octoberId, callback) {
      let postBody = null;
      // verify the required parameter 'octoberId' is set
      if (octoberId === undefined || octoberId === null) {
        throw new Error("Missing the required parameter 'octoberId' when calling deleteoctober");
      }

      let pathParams = {
        'octoberId': octoberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/october/{octoberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlloctober operation.
     * @callback module:api/OctoberApi~getAlloctoberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/October>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/OctoberApi~getAlloctoberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/October>}
     */
    getAlloctober(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [October];
      return this.apiClient.callApi(
        '/october/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsoctober operation.
     * @callback module:api/OctoberApi~getByParamsoctoberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/October>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/OctoberApi~getByParamsoctoberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/October>}
     */
    getByParamsoctober(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsoctober");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [October];
      return this.apiClient.callApi(
        '/october/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getoctober operation.
     * @callback module:api/OctoberApi~getoctoberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/October} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} octoberId the Id parameter
     * @param {module:api/OctoberApi~getoctoberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/October}
     */
    getoctober(octoberId, callback) {
      let postBody = null;
      // verify the required parameter 'octoberId' is set
      if (octoberId === undefined || octoberId === null) {
        throw new Error("Missing the required parameter 'octoberId' when calling getoctober");
      }

      let pathParams = {
        'octoberId': octoberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = October;
      return this.apiClient.callApi(
        '/october/{octoberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateoctober operation.
     * @callback module:api/OctoberApi~updateoctoberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/October} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} octoberId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/October} opts.october data to be updated
     * @param {module:api/OctoberApi~updateoctoberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/October}
     */
    updateoctober(octoberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['october'];
      // verify the required parameter 'octoberId' is set
      if (octoberId === undefined || octoberId === null) {
        throw new Error("Missing the required parameter 'octoberId' when calling updateoctober");
      }

      let pathParams = {
        'octoberId': octoberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = October;
      return this.apiClient.callApi(
        '/october/{octoberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
