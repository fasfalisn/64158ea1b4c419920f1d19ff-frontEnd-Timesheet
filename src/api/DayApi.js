/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Day from '../model/Day';

/**
* Day service.
* @module api/DayApi
* @version 1.0.0
*/
export default class DayApi {

    /**
    * Constructs a new DayApi. 
    * @alias module:api/DayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createday operation.
     * @callback module:api/DayApi~createdayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Day} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Day} day data to be created
     * @param {module:api/DayApi~createdayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Day}
     */
    createday(day, callback) {
      let postBody = day;
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling createday");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Day;
      return this.apiClient.callApi(
        '/day', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteday operation.
     * @callback module:api/DayApi~deletedayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} dayId the Id parameter
     * @param {module:api/DayApi~deletedayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteday(dayId, callback) {
      let postBody = null;
      // verify the required parameter 'dayId' is set
      if (dayId === undefined || dayId === null) {
        throw new Error("Missing the required parameter 'dayId' when calling deleteday");
      }

      let pathParams = {
        'dayId': dayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/day/{dayId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllday operation.
     * @callback module:api/DayApi~getAlldayCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Day>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/DayApi~getAlldayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Day>}
     */
    getAllday(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Day];
      return this.apiClient.callApi(
        '/day/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsday operation.
     * @callback module:api/DayApi~getByParamsdayCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Day>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/DayApi~getByParamsdayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Day>}
     */
    getByParamsday(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsday");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Day];
      return this.apiClient.callApi(
        '/day/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getday operation.
     * @callback module:api/DayApi~getdayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Day} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} dayId the Id parameter
     * @param {module:api/DayApi~getdayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Day}
     */
    getday(dayId, callback) {
      let postBody = null;
      // verify the required parameter 'dayId' is set
      if (dayId === undefined || dayId === null) {
        throw new Error("Missing the required parameter 'dayId' when calling getday");
      }

      let pathParams = {
        'dayId': dayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Day;
      return this.apiClient.callApi(
        '/day/{dayId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateday operation.
     * @callback module:api/DayApi~updatedayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Day} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} dayId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Day} opts.day data to be updated
     * @param {module:api/DayApi~updatedayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Day}
     */
    updateday(dayId, opts, callback) {
      opts = opts || {};
      let postBody = opts['day'];
      // verify the required parameter 'dayId' is set
      if (dayId === undefined || dayId === null) {
        throw new Error("Missing the required parameter 'dayId' when calling updateday");
      }

      let pathParams = {
        'dayId': dayId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Day;
      return this.apiClient.callApi(
        '/day/{dayId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
