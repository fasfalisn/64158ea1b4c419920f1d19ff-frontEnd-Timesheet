/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import November from '../model/November';

/**
* November service.
* @module api/NovemberApi
* @version 1.0.0
*/
export default class NovemberApi {

    /**
    * Constructs a new NovemberApi. 
    * @alias module:api/NovemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createnovember operation.
     * @callback module:api/NovemberApi~createnovemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/November} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/November} november data to be created
     * @param {module:api/NovemberApi~createnovemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/November}
     */
    createnovember(november, callback) {
      let postBody = november;
      // verify the required parameter 'november' is set
      if (november === undefined || november === null) {
        throw new Error("Missing the required parameter 'november' when calling createnovember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = November;
      return this.apiClient.callApi(
        '/november', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletenovember operation.
     * @callback module:api/NovemberApi~deletenovemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} novemberId the Id parameter
     * @param {module:api/NovemberApi~deletenovemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletenovember(novemberId, callback) {
      let postBody = null;
      // verify the required parameter 'novemberId' is set
      if (novemberId === undefined || novemberId === null) {
        throw new Error("Missing the required parameter 'novemberId' when calling deletenovember");
      }

      let pathParams = {
        'novemberId': novemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/november/{novemberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllnovember operation.
     * @callback module:api/NovemberApi~getAllnovemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/November>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/NovemberApi~getAllnovemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/November>}
     */
    getAllnovember(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [November];
      return this.apiClient.callApi(
        '/november/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsnovember operation.
     * @callback module:api/NovemberApi~getByParamsnovemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/November>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/NovemberApi~getByParamsnovemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/November>}
     */
    getByParamsnovember(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsnovember");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [November];
      return this.apiClient.callApi(
        '/november/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getnovember operation.
     * @callback module:api/NovemberApi~getnovemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/November} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} novemberId the Id parameter
     * @param {module:api/NovemberApi~getnovemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/November}
     */
    getnovember(novemberId, callback) {
      let postBody = null;
      // verify the required parameter 'novemberId' is set
      if (novemberId === undefined || novemberId === null) {
        throw new Error("Missing the required parameter 'novemberId' when calling getnovember");
      }

      let pathParams = {
        'novemberId': novemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = November;
      return this.apiClient.callApi(
        '/november/{novemberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatenovember operation.
     * @callback module:api/NovemberApi~updatenovemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/November} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} novemberId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/November} opts.november data to be updated
     * @param {module:api/NovemberApi~updatenovemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/November}
     */
    updatenovember(novemberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['november'];
      // verify the required parameter 'novemberId' is set
      if (novemberId === undefined || novemberId === null) {
        throw new Error("Missing the required parameter 'novemberId' when calling updatenovember");
      }

      let pathParams = {
        'novemberId': novemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = November;
      return this.apiClient.callApi(
        '/november/{novemberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
