/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Month from '../model/Month';

/**
* Month service.
* @module api/MonthApi
* @version 1.0.0
*/
export default class MonthApi {

    /**
    * Constructs a new MonthApi. 
    * @alias module:api/MonthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createmonth operation.
     * @callback module:api/MonthApi~createmonthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Month} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Month} month data to be created
     * @param {module:api/MonthApi~createmonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Month}
     */
    createmonth(month, callback) {
      let postBody = month;
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling createmonth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Month;
      return this.apiClient.callApi(
        '/month', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletemonth operation.
     * @callback module:api/MonthApi~deletemonthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} monthId the Id parameter
     * @param {module:api/MonthApi~deletemonthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletemonth(monthId, callback) {
      let postBody = null;
      // verify the required parameter 'monthId' is set
      if (monthId === undefined || monthId === null) {
        throw new Error("Missing the required parameter 'monthId' when calling deletemonth");
      }

      let pathParams = {
        'monthId': monthId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/month/{monthId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllmonth operation.
     * @callback module:api/MonthApi~getAllmonthCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Month>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/MonthApi~getAllmonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Month>}
     */
    getAllmonth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Month];
      return this.apiClient.callApi(
        '/month/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsmonth operation.
     * @callback module:api/MonthApi~getByParamsmonthCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Month>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/MonthApi~getByParamsmonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Month>}
     */
    getByParamsmonth(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsmonth");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Month];
      return this.apiClient.callApi(
        '/month/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getmonth operation.
     * @callback module:api/MonthApi~getmonthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Month} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} monthId the Id parameter
     * @param {module:api/MonthApi~getmonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Month}
     */
    getmonth(monthId, callback) {
      let postBody = null;
      // verify the required parameter 'monthId' is set
      if (monthId === undefined || monthId === null) {
        throw new Error("Missing the required parameter 'monthId' when calling getmonth");
      }

      let pathParams = {
        'monthId': monthId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Month;
      return this.apiClient.callApi(
        '/month/{monthId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatemonth operation.
     * @callback module:api/MonthApi~updatemonthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Month} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} monthId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Month} opts.month data to be updated
     * @param {module:api/MonthApi~updatemonthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Month}
     */
    updatemonth(monthId, opts, callback) {
      opts = opts || {};
      let postBody = opts['month'];
      // verify the required parameter 'monthId' is set
      if (monthId === undefined || monthId === null) {
        throw new Error("Missing the required parameter 'monthId' when calling updatemonth");
      }

      let pathParams = {
        'monthId': monthId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Month;
      return this.apiClient.callApi(
        '/month/{monthId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
