/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import September from '../model/September';

/**
* September service.
* @module api/SeptemberApi
* @version 1.0.0
*/
export default class SeptemberApi {

    /**
    * Constructs a new SeptemberApi. 
    * @alias module:api/SeptemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createseptember operation.
     * @callback module:api/SeptemberApi~createseptemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/September} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/September} september data to be created
     * @param {module:api/SeptemberApi~createseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/September}
     */
    createseptember(september, callback) {
      let postBody = september;
      // verify the required parameter 'september' is set
      if (september === undefined || september === null) {
        throw new Error("Missing the required parameter 'september' when calling createseptember");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = September;
      return this.apiClient.callApi(
        '/september', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteseptember operation.
     * @callback module:api/SeptemberApi~deleteseptemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} septemberId the Id parameter
     * @param {module:api/SeptemberApi~deleteseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteseptember(septemberId, callback) {
      let postBody = null;
      // verify the required parameter 'septemberId' is set
      if (septemberId === undefined || septemberId === null) {
        throw new Error("Missing the required parameter 'septemberId' when calling deleteseptember");
      }

      let pathParams = {
        'septemberId': septemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/september/{septemberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllseptember operation.
     * @callback module:api/SeptemberApi~getAllseptemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/September>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/SeptemberApi~getAllseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/September>}
     */
    getAllseptember(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [September];
      return this.apiClient.callApi(
        '/september/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsseptember operation.
     * @callback module:api/SeptemberApi~getByParamsseptemberCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/September>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/SeptemberApi~getByParamsseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/September>}
     */
    getByParamsseptember(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsseptember");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [September];
      return this.apiClient.callApi(
        '/september/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getseptember operation.
     * @callback module:api/SeptemberApi~getseptemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/September} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} septemberId the Id parameter
     * @param {module:api/SeptemberApi~getseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/September}
     */
    getseptember(septemberId, callback) {
      let postBody = null;
      // verify the required parameter 'septemberId' is set
      if (septemberId === undefined || septemberId === null) {
        throw new Error("Missing the required parameter 'septemberId' when calling getseptember");
      }

      let pathParams = {
        'septemberId': septemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = September;
      return this.apiClient.callApi(
        '/september/{septemberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateseptember operation.
     * @callback module:api/SeptemberApi~updateseptemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/September} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} septemberId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/September} opts.september data to be updated
     * @param {module:api/SeptemberApi~updateseptemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/September}
     */
    updateseptember(septemberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['september'];
      // verify the required parameter 'septemberId' is set
      if (septemberId === undefined || septemberId === null) {
        throw new Error("Missing the required parameter 'septemberId' when calling updateseptember");
      }

      let pathParams = {
        'septemberId': septemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = September;
      return this.apiClient.callApi(
        '/september/{septemberId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
